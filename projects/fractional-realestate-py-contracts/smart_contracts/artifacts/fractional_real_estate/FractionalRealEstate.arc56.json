{
    "name": "FractionalRealEstate",
    "structs": {
        "PropertyStruct": [
            {
                "name": "address",
                "type": "string"
            },
            {
                "name": "total_shares",
                "type": "uint64"
            },
            {
                "name": "available_shares",
                "type": "uint64"
            },
            {
                "name": "price_per_share",
                "type": "uint64"
            },
            {
                "name": "property_asset_id",
                "type": "uint64"
            },
            {
                "name": "owner_address",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "create_property_listing",
            "args": [
                {
                    "type": "string",
                    "name": "property_address",
                    "desc": "The physical address of the property (string)"
                },
                {
                    "type": "uint64",
                    "name": "shares",
                    "desc": "Total number of shares to be created (uint64)"
                },
                {
                    "type": "uint64",
                    "name": "price_per_share",
                    "desc": "Price per share in microAlgos (uint64)"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The asset ID of the created property token (uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "List a new property for fractional ownership.\nSteps: 1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property. 2. Constructs a PropertyStruct with all relevant details. 3. Stores the struct in a BoxMap, using the asset ID as the key.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchase_from_lister",
            "args": [
                {
                    "type": "uint64",
                    "name": "property_id",
                    "desc": "The asset ID of the property to buy shares of"
                },
                {
                    "type": "uint64",
                    "name": "shares",
                    "desc": "Number of shares to buy"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "The payment transaction (must be grouped with the app call)"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "True if the purchase is successful"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Purchase shares of a listed property from the original lister.\nThis method: 1. Validates the purchase (checks payment, share availability, etc.). 2. Transfers the requested number of shares to the buyer using an inner asset transfer. 3. Pays the property owner using an inner payment transaction. 4. Updates the available shares in the BoxMap.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_property_info",
            "args": [
                {
                    "type": "uint64",
                    "name": "property_id",
                    "desc": "The asset ID of the property"
                }
            ],
            "returns": {
                "type": "(string,uint64,uint64,uint64,uint64,address)",
                "struct": "PropertyStruct",
                "desc": "The PropertyStruct containing the property's information"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get information about a listed property.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    FractionalRealEstate Contract\n\n    This smart contract allows users to tokenize real estate properties as Algorand Standard Assets (ASAs).\n    Users can list properties, and others can purchase fractional shares of those properties.\n\n    Key Algorand concepts demonstrated:\n    - Asset creation and transfer using inner transactions (the contract itself creates new assets)\n    - Scalable per-asset storage using BoxMap and custom structs\n    - Subroutines (private methods) for composability and code reuse\n    - Defensive programming using assert statements\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listed_properties": {
                    "keyType": "uint64",
                    "valueType": "PropertyStruct",
                    "prefix": "cHJvcGVydGllcw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        336
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        269
                    ],
                    "errorMessage": "Invalid payment amount"
                },
                {
                    "pc": [
                        277
                    ],
                    "errorMessage": "Invalid payment receiver"
                },
                {
                    "pc": [
                        285
                    ],
                    "errorMessage": "Invalid payment sender"
                },
                {
                    "pc": [
                        256
                    ],
                    "errorMessage": "Not enough shares available"
                },
                {
                    "pc": [
                        62,
                        81,
                        120
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        242,
                        363
                    ],
                    "errorMessage": "Property not listed"
                },
                {
                    "pc": [
                        150
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        65,
                        84,
                        123
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        245,
                        365
                    ],
                    "errorMessage": "check self.listed_properties entry exists"
                },
                {
                    "pc": [
                        100
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAQASJgIEFR98dQpwcm9wZXJ0aWVzMRtBAHGCAwRerGvFBH1QeoQE8wq0OzYaAI4DADwAFQACI0MxGRREMRhENhoBiAEYKExQsCJDMRkURDEYRDYaATYaAjEWIglJOBAiEkSIAH+AAQAjTwJUKExQsCJDMRkURDEYRDYaATYaAjYaA4gAEShMULAiQzEZQP+mMRgURCJDigMBsYv9VwIAi/4XMgpJsiqyKSOyI7IigARQUk9QsiWyJoEDshAjsgGztDwWMQCAAgBCi/5Qi/5Qi/9QSwJQTFCL/VApSwJQSbxITL+JigMBKYv9UEm9RQFESb5Ei/4XSwGBCltKDkSL/zgISwMkW0sDCxJEi/84BzIKEkSL/zgAMQASRLFLAoEaWzEASwOyErIUshGBBLIQI7IBs0sBCRZPAkxcCksCvEhPAksBv7FJJFtPAgtMVyIgsgeyCCKyECOyAbMiiYoBASmL/1BJvUUBRL5EiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}