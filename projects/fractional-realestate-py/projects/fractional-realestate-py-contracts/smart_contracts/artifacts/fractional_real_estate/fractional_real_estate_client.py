# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "The physical address of the property (string)", "name": "property_address"}, {"type": "uint64", "desc": "Total number of shares to be created (uint64)", "name": "shares"}, {"type": "uint64", "desc": "Price per share in microAlgos (uint64)", "name": "price_per_share"}], "name": "create_property_listing", "returns": {"type": "uint64", "desc": "The asset ID of the created property token (uint64)"}, "desc": "List a new property for fractional ownership.\nSteps: 1. Creates a new Algorand Standard Asset (ASA) to represent shares in the property. 2. Constructs a PropertyStruct with all relevant details. 3. Stores the struct in a BoxMap, using the asset ID as the key.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID of the property to buy shares of", "name": "property_id"}, {"type": "uint64", "desc": "Number of shares to buy", "name": "shares"}, {"type": "pay", "desc": "The payment transaction (must be grouped with the app call)", "name": "payment"}], "name": "purchase_from_lister", "returns": {"type": "bool", "desc": "True if the purchase is successful"}, "desc": "Purchase shares of a listed property from the original lister.\nThis method: 1. Validates the purchase (checks payment, share availability, etc.). 2. Transfers the requested number of shares to the buyer using an inner asset transfer. 3. Pays the property owner using an inner payment transaction. 4. Updates the available shares in the BoxMap.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The asset ID of the property", "name": "property_id"}], "name": "get_property_info", "returns": {"type": "(string,uint64,uint64,uint64,uint64,address)", "desc": "The PropertyStruct containing the property's information", "struct": "PropertyStruct"}, "desc": "Get information about a listed property.", "events": [], "readonly": true, "recommendations": {}}], "name": "FractionalRealEstate", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {"listed_properties": {"keyType": "uint64", "valueType": "PropertyStruct", "prefix": "cHJvcGVydGllcw=="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"PropertyStruct": [{"name": "address", "type": "string"}, {"name": "total_shares", "type": "uint64"}, {"name": "available_shares", "type": "uint64"}, {"name": "price_per_share", "type": "uint64"}, {"name": "property_asset_id", "type": "uint64"}, {"name": "owner_address", "type": "address"}]}, "byteCode": {"approval": "CiADAQASJgIEFR98dQpwcm9wZXJ0aWVzMRtBAHGCAwRerGvFBH1QeoQE8wq0OzYaAI4DADwAFQACI0MxGRREMRhENhoBiAEYKExQsCJDMRkURDEYRDYaATYaAjEWIglJOBAiEkSIAH+AAQAjTwJUKExQsCJDMRkURDEYRDYaATYaAjYaA4gAEShMULAiQzEZQP+mMRgURCJDigMBsYv9VwIAi/4XMgpJsiqyKSOyI7IigARQUk9QsiWyJoEDshAjsgGztDwWMQCAAgBCi/5Qi/5Qi/9QSwJQTFCL/VApSwJQSbxITL+JigMBKYv9UEm9RQFESb5Ei/4XSwGBCltKDkSL/zgISwMkW0sDCxJEi/84BzIKEkSL/zgAMQASRLFLAoEaWzEASwOyErIUshGBBLIQI7IBs0sBCRZPAkxcCksCvEhPAksBv7FJJFtPAgtMVyIgsgeyCCKyECOyAbMiiYoBASmL/1BJvUUBRL5EiQ==", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 10, "patch": 0}}, "desc": "\n    FractionalRealEstate Contract\n\n    This smart contract allows users to tokenize real estate properties as Algorand Standard Assets (ASAs).\n    Users can list properties, and others can purchase fractional shares of those properties.\n\n    Key Algorand concepts demonstrated:\n    - Asset creation and transfer using inner transactions (the contract itself creates new assets)\n    - Scalable per-asset storage using BoxMap and custom structs\n    - Subroutines (private methods) for composability and code reuse\n    - Defensive programming using assert statements\n    ", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [336], "errorMessage": "Index access is out of bounds"}, {"pc": [269], "errorMessage": "Invalid payment amount"}, {"pc": [277], "errorMessage": "Invalid payment receiver"}, {"pc": [285], "errorMessage": "Invalid payment sender"}, {"pc": [256], "errorMessage": "Not enough shares available"}, {"pc": [62, 81, 120], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [242, 363], "errorMessage": "Property not listed"}, {"pc": [150], "errorMessage": "can only call when creating"}, {"pc": [65, 84, 123], "errorMessage": "can only call when not creating"}, {"pc": [245, 365], "errorMessage": "check self.listed_properties entry exists"}, {"pc": [100], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class PropertyStruct:
    """Struct for PropertyStruct"""
    address: str
    total_shares: int
    available_shares: int
    price_per_share: int
    property_asset_id: int
    owner_address: str


@dataclasses.dataclass(frozen=True, kw_only=True)
class CreatePropertyListingArgs:
    """Dataclass for create_property_listing arguments"""
    property_address: str
    shares: int
    price_per_share: int

    @property
    def abi_method_signature(self) -> str:
        return "create_property_listing(string,uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PurchaseFromListerArgs:
    """Dataclass for purchase_from_lister arguments"""
    property_id: int
    shares: int
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "purchase_from_lister(uint64,uint64,pay)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPropertyInfoArgs:
    """Dataclass for get_property_info arguments"""
    property_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address)"


class FractionalRealEstateParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_property_listing(
        self,
        args: tuple[str, int, int] | CreatePropertyListingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_property_listing(string,uint64,uint64)uint64",
            "args": method_args,
        }))

    def purchase_from_lister(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PurchaseFromListerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_from_lister(uint64,uint64,pay)bool",
            "args": method_args,
        }))

    def get_property_info(
        self,
        args: tuple[int] | GetPropertyInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address)",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class FractionalRealEstateCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_property_listing(
        self,
        args: tuple[str, int, int] | CreatePropertyListingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_property_listing(string,uint64,uint64)uint64",
            "args": method_args,
        }))

    def purchase_from_lister(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PurchaseFromListerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_from_lister(uint64,uint64,pay)bool",
            "args": method_args,
        }))

    def get_property_info(
        self,
        args: tuple[int] | GetPropertyInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address)",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class FractionalRealEstateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_property_listing(
        self,
        args: tuple[str, int, int] | CreatePropertyListingArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_property_listing(string,uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def purchase_from_lister(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PurchaseFromListerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase_from_lister(uint64,uint64,pay)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def get_property_info(
        self,
        args: tuple[int] | GetPropertyInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PropertyStruct]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PropertyStruct, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PropertyStruct], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class FractionalRealEstateState:
    """Methods to access state for the current FractionalRealEstate app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "PropertyStruct": PropertyStruct
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def listed_properties(self) -> "_MapState[int, PropertyStruct]":
        """Get values from the listed_properties map in box state"""
        return _MapState(
            self.app_client.state.box,
            "listed_properties",
            self._struct_classes.get("PropertyStruct")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class FractionalRealEstateClient:
    """Client for interacting with FractionalRealEstate smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = FractionalRealEstateParams(self.app_client)
        self.create_transaction = FractionalRealEstateCreateTransactionParams(self.app_client)
        self.send = FractionalRealEstateSend(self.app_client)
        self.state = FractionalRealEstateState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "FractionalRealEstateClient":
        return FractionalRealEstateClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "FractionalRealEstateClient":
        return FractionalRealEstateClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "FractionalRealEstateClient":
        return FractionalRealEstateClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "FractionalRealEstateComposer":
        return FractionalRealEstateComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_property_listing(string,uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["purchase_from_lister(uint64,uint64,pay)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PropertyStruct | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | PropertyStruct | bool | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class FractionalRealEstateBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating FractionalRealEstate contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class FractionalRealEstateFactory(algokit_utils.TypedAppFactoryProtocol[FractionalRealEstateBareCallCreateParams, None, None]):
    """Factory for deploying and managing FractionalRealEstateClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = FractionalRealEstateFactoryParams(self.app_factory)
        self.create_transaction = FractionalRealEstateFactoryCreateTransaction(self.app_factory)
        self.send = FractionalRealEstateFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: FractionalRealEstateBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[FractionalRealEstateClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return FractionalRealEstateClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> FractionalRealEstateClient:
        """Get an app client by creator address and name"""
        return FractionalRealEstateClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> FractionalRealEstateClient:
        """Get an app client by app ID"""
        return FractionalRealEstateClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class FractionalRealEstateFactoryParams:
    """Parameters for creating transactions for FractionalRealEstate contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = FractionalRealEstateFactoryCreateParams(app_factory)
        self.update = FractionalRealEstateFactoryUpdateParams(app_factory)
        self.delete = FractionalRealEstateFactoryDeleteParams(app_factory)

class FractionalRealEstateFactoryCreateParams:
    """Parameters for 'create' operations of FractionalRealEstate contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def create_property_listing(
        self,
        args: tuple[str, int, int] | CreatePropertyListingArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_property_listing(string,uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_property_listing(string,uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def purchase_from_lister(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PurchaseFromListerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the purchase_from_lister(uint64,uint64,pay)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "purchase_from_lister(uint64,uint64,pay)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_property_info(
        self,
        args: tuple[int] | GetPropertyInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class FractionalRealEstateFactoryUpdateParams:
    """Parameters for 'update' operations of FractionalRealEstate contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class FractionalRealEstateFactoryDeleteParams:
    """Parameters for 'delete' operations of FractionalRealEstate contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class FractionalRealEstateFactoryCreateTransaction:
    """Create transactions for FractionalRealEstate contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = FractionalRealEstateFactoryCreateTransactionCreate(app_factory)


class FractionalRealEstateFactoryCreateTransactionCreate:
    """Create new instances of FractionalRealEstate contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class FractionalRealEstateFactorySend:
    """Send calls to FractionalRealEstate contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = FractionalRealEstateFactorySendCreate(app_factory)


class FractionalRealEstateFactorySendCreate:
    """Send create calls to FractionalRealEstate contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[FractionalRealEstateClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return FractionalRealEstateClient(result[0]), result[1]


class FractionalRealEstateComposer:
    """Composer for creating transaction groups for FractionalRealEstate contract calls"""

    def __init__(self, client: "FractionalRealEstateClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def create_property_listing(
        self,
        args: tuple[str, int, int] | CreatePropertyListingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "FractionalRealEstateComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_property_listing(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_property_listing(string,uint64,uint64)uint64", v
            )
        )
        return self

    def purchase_from_lister(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PurchaseFromListerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "FractionalRealEstateComposer":
        self._composer.add_app_call_method_call(
            self.client.params.purchase_from_lister(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "purchase_from_lister(uint64,uint64,pay)bool", v
            )
        )
        return self

    def get_property_info(
        self,
        args: tuple[int] | GetPropertyInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "FractionalRealEstateComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_property_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address)", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "FractionalRealEstateComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "FractionalRealEstateComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
