{
  "version": 3,
  "sources": [
    "../../fractional_real_estate/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAkIK;;AAAA;AAAA;AAAA;;AAAA;AAlIL;;;AAkIK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/DA;;AAAA;AAAA;AAAA;;AAAA;AAnEL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmEK;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/CA;;AAAA;AAAA;AAAA;;AAAA;AApBL;;;AAAA;;;AAAA;;;AAoBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBL;;AAAA;;;;;;;;;AAoBA;;;AAuBqB;AACE;;AAAA;;;AAEL;;AAAA;AAEE;;AACA;;;;;AAFC;;;;;AAFC;;;;;;;;;;AAFD;;;;AAOL;;;AAPK;;;AAkBS;AACS;;AANiB;;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAhD;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AASA;AAER;;;AAwB8B;AAAf;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACkB;AAAA;AAAA;AAGd;;AAAA;AAAiB;;AAAA;;AAAA;AAAjB;AAAA;AADJ;AAKI;;AAAA;;AAAkC;;AAAA;AAAA;AAAhB;;AAAA;AAAlB;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAIO;;AAAA;;AAAkB;;AAAlB;AAAP;AAGA;AACe;;AAAA;;AAAA;AACI;;;;;;;;;;AAFnB;;;;AAAA;;;AAAA;AAQI;;AAAA;AAD+B;AAAnC;;AAAA;AAAA;;AAGA;;AAAA;;AAAA;;AAAA;;AAAA;AAGA;AAC2B;AAAA;AAAA;AAAhB;;AAAA;AACE;AAAA;;;;;;;AAFb;;;AAGQ;;;AAHR;AAMO;AAAP;AAER;;;AAU8B;AAAf;;AAAA;AAAA;AAAA;AAAA;;AAAP;AACO;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.fractional_real_estate.contract.FractionalRealEstate.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 18"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 \"properties\""
    },
    "24": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "26": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "29": {
      "op": "pushbytess 0x5eac6bc5 0x7d507a84 0xf30ab43b // method \"create_property_listing(string,uint64,uint64)uint64\", method \"purchase_from_lister(uint64,uint64,pay)bool\", method \"get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address)\"",
      "defined_out": [
        "Method(create_property_listing(string,uint64,uint64)uint64)",
        "Method(get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address))",
        "Method(purchase_from_lister(uint64,uint64,pay)bool)"
      ],
      "stack_out": [
        "Method(create_property_listing(string,uint64,uint64)uint64)",
        "Method(purchase_from_lister(uint64,uint64,pay)bool)",
        "Method(get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address))"
      ]
    },
    "46": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_property_listing(string,uint64,uint64)uint64)",
        "Method(get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address))",
        "Method(purchase_from_lister(uint64,uint64,pay)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_property_listing(string,uint64,uint64)uint64)",
        "Method(purchase_from_lister(uint64,uint64,pay)bool)",
        "Method(get_property_info(uint64)(string,uint64,uint64,uint64,uint64,address))",
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "match main_create_property_listing_route@5 main_purchase_from_lister_route@6 main_get_property_info_route@7",
      "stack_out": []
    },
    "57": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "58": {
      "op": "return",
      "stack_out": []
    },
    "59": {
      "block": "main_get_property_info_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "61": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "62": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "65": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "66": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "69": {
      "callsub": "smart_contracts.fractional_real_estate.contract.FractionalRealEstate.get_property_info",
      "op": "callsub get_property_info",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "72": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%20#0"
      ]
    },
    "74": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "75": {
      "op": "log",
      "stack_out": []
    },
    "76": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "77": {
      "op": "return",
      "stack_out": []
    },
    "78": {
      "block": "main_purchase_from_lister_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "81": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "84": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "85": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "88": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "91": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%14#0"
      ]
    },
    "93": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%14#0",
        "1"
      ]
    },
    "94": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "gtxn_idx%0#0"
      ]
    },
    "95": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "96": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "98": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "100": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "gtxn_idx%0#0"
      ]
    },
    "101": {
      "callsub": "smart_contracts.fractional_real_estate.contract.FractionalRealEstate.purchase_from_lister",
      "op": "callsub purchase_from_lister",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "104": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "107": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "108": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "110": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "111": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "113": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "114": {
      "op": "log",
      "stack_out": []
    },
    "115": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "116": {
      "op": "return",
      "stack_out": []
    },
    "117": {
      "block": "main_create_property_listing_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "119": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "120": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "121": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "123": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "124": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "127": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "130": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "133": {
      "callsub": "smart_contracts.fractional_real_estate.contract.FractionalRealEstate.create_property_listing",
      "op": "callsub create_property_listing",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "136": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "137": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "139": {
      "op": "log",
      "stack_out": []
    },
    "140": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "141": {
      "op": "return",
      "stack_out": []
    },
    "142": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "144": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "147": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "149": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "150": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "151": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "subroutine": "smart_contracts.fractional_real_estate.contract.FractionalRealEstate.create_property_listing",
      "params": {
        "property_address#0": "bytes",
        "shares#0": "bytes",
        "price_per_share#0": "bytes"
      },
      "block": "create_property_listing",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "156": {
      "op": "itxn_begin"
    },
    "157": {
      "op": "frame_dig -3",
      "defined_out": [
        "property_address#0 (copy)"
      ],
      "stack_out": [
        "property_address#0 (copy)"
      ]
    },
    "159": {
      "op": "extract 2 0",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "162": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "shares#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "shares#0 (copy)"
      ]
    },
    "164": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0"
      ]
    },
    "165": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "167": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "168": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "170": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0"
      ]
    },
    "172": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0",
        "0"
      ]
    },
    "173": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0"
      ]
    },
    "175": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "177": {
      "op": "pushbytes \"PROP\"",
      "defined_out": [
        "\"PROP\"",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "\"PROP\""
      ]
    },
    "183": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "185": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "187": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "189": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "191": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "192": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "194": {
      "op": "itxn_submit"
    },
    "195": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "txn_result.CreatedAssetID#0"
      ],
      "stack_out": [
        "txn_result.CreatedAssetID#0"
      ]
    },
    "197": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "198": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "200": {
      "op": "pushbytes 0x0042",
      "defined_out": [
        "0x0042",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "0x0042"
      ]
    },
    "204": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "0x0042",
        "shares#0 (copy)"
      ]
    },
    "206": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "207": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_tuple_buffer%2#0",
        "shares#0 (copy)"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "210": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "price_per_share#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_tuple_buffer%3#0",
        "price_per_share#0 (copy)"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "213": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "215": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "216": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0",
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "218": {
      "op": "frame_dig -3",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%6#0",
        "property_address#0 (copy)"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "221": {
      "op": "bytec_1 // \"properties\"",
      "defined_out": [
        "\"properties\"",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%7#0",
        "\"properties\""
      ]
    },
    "222": {
      "op": "dig 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%7#0",
        "\"properties\"",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "224": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%7#0",
        "box_prefixed_key%0#0"
      ]
    },
    "225": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%7#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "226": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%7#0",
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "227": {
      "op": "pop",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%7#0",
        "box_prefixed_key%0#0"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "box_prefixed_key%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "229": {
      "op": "box_put",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "230": {
      "retsub": true,
      "op": "retsub"
    },
    "231": {
      "subroutine": "smart_contracts.fractional_real_estate.contract.FractionalRealEstate.purchase_from_lister",
      "params": {
        "property_id#0": "bytes",
        "shares#0": "bytes",
        "payment#0": "uint64"
      },
      "block": "purchase_from_lister",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "234": {
      "op": "bytec_1 // \"properties\"",
      "defined_out": [
        "\"properties\""
      ],
      "stack_out": [
        "\"properties\""
      ]
    },
    "235": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"properties\"",
        "property_id#0 (copy)"
      ],
      "stack_out": [
        "\"properties\"",
        "property_id#0 (copy)"
      ]
    },
    "237": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "238": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "239": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "240": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "242": {
      "error": "Property not listed",
      "op": "assert // Property not listed",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "243": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "244": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0",
        "property_struct#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "maybe_exists%1#0"
      ]
    },
    "245": {
      "error": "check self.listed_properties entry exists",
      "op": "assert // check self.listed_properties entry exists",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0"
      ]
    },
    "246": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "shares#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "shares#0 (copy)"
      ]
    },
    "248": {
      "op": "btoi",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0"
      ]
    },
    "249": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "property_struct#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "property_struct#0 (copy)"
      ]
    },
    "251": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "box_prefixed_key%0#0",
        "property_struct#0",
        "property_struct#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "property_struct#0 (copy)",
        "10"
      ]
    },
    "253": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "254": {
      "op": "dup2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)",
        "tmp%2#0 (copy)"
      ]
    },
    "255": {
      "op": "<=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "256": {
      "error": "Not enough shares available",
      "op": "assert // Not enough shares available",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "257": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "payment#0 (copy)",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "payment#0 (copy)"
      ]
    },
    "259": {
      "op": "gtxns Amount",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "261": {
      "op": "dig 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "property_struct#0 (copy)"
      ]
    },
    "263": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "box_prefixed_key%0#0",
        "property_struct#0",
        "property_struct#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "property_struct#0 (copy)",
        "18"
      ]
    },
    "264": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "265": {
      "op": "dig 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%7#0",
        "tmp%0#0 (copy)"
      ]
    },
    "267": {
      "op": "*",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%8#0"
      ]
    },
    "268": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "269": {
      "error": "Invalid payment amount",
      "op": "assert // Invalid payment amount",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "270": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "payment#0 (copy)"
      ]
    },
    "272": {
      "op": "gtxns Receiver",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%10#0"
      ]
    },
    "274": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "276": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%12#0"
      ]
    },
    "277": {
      "error": "Invalid payment receiver",
      "op": "assert // Invalid payment receiver",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "278": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "payment#0 (copy)"
      ]
    },
    "280": {
      "op": "gtxns Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%13#0"
      ]
    },
    "282": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "284": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%15#0"
      ]
    },
    "285": {
      "error": "Invalid payment sender",
      "op": "assert // Invalid payment sender",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "286": {
      "op": "itxn_begin"
    },
    "287": {
      "op": "dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "property_struct#0 (copy)"
      ]
    },
    "289": {
      "op": "pushint 26 // 26",
      "defined_out": [
        "26",
        "box_prefixed_key%0#0",
        "property_struct#0",
        "property_struct#0 (copy)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "property_struct#0 (copy)",
        "26"
      ]
    },
    "291": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "292": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "294": {
      "op": "dig 3",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "296": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "298": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "300": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "302": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "axfer"
      ]
    },
    "304": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "306": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "0"
      ]
    },
    "307": {
      "op": "itxn_field Fee",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "309": {
      "op": "itxn_submit"
    },
    "310": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "312": {
      "op": "-",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "313": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "314": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "property_struct#0"
      ]
    },
    "316": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "property_struct#0",
        "val_as_bytes%0#0"
      ]
    },
    "317": {
      "op": "replace2 10",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "property_struct#0"
      ]
    },
    "319": {
      "op": "dig 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "property_struct#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "321": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "property_struct#0",
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "property_struct#0",
        "{box_del}"
      ]
    },
    "322": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0",
        "property_struct#0"
      ]
    },
    "323": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "property_struct#0",
        "box_prefixed_key%0#0"
      ]
    },
    "325": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "property_struct#0",
        "box_prefixed_key%0#0",
        "property_struct#0 (copy)"
      ]
    },
    "327": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "property_struct#0"
      ]
    },
    "328": {
      "op": "itxn_begin"
    },
    "329": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "property_struct#0",
        "property_struct#0 (copy)"
      ]
    },
    "330": {
      "op": "intc_2 // 18",
      "stack_out": [
        "tmp%0#0",
        "property_struct#0",
        "property_struct#0 (copy)",
        "18"
      ]
    },
    "331": {
      "op": "extract_uint64",
      "defined_out": [
        "property_struct#0",
        "tmp%0#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "property_struct#0",
        "tmp%22#0"
      ]
    },
    "332": {
      "op": "uncover 2",
      "stack_out": [
        "property_struct#0",
        "tmp%22#0",
        "tmp%0#0"
      ]
    },
    "334": {
      "op": "*",
      "defined_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "property_struct#0"
      ],
      "stack_out": [
        "property_struct#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "335": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "property_struct#0"
      ]
    },
    "336": {
      "error": "Index access is out of bounds",
      "op": "extract 34 32 // on error: Index access is out of bounds",
      "defined_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "339": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "341": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "343": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "344": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "346": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "347": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "349": {
      "op": "itxn_submit"
    },
    "350": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "351": {
      "retsub": true,
      "op": "retsub"
    },
    "352": {
      "subroutine": "smart_contracts.fractional_real_estate.contract.FractionalRealEstate.get_property_info",
      "params": {
        "property_id#0": "bytes"
      },
      "block": "get_property_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "355": {
      "op": "bytec_1 // \"properties\"",
      "defined_out": [
        "\"properties\""
      ],
      "stack_out": [
        "\"properties\""
      ]
    },
    "356": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"properties\"",
        "property_id#0 (copy)"
      ],
      "stack_out": [
        "\"properties\"",
        "property_id#0 (copy)"
      ]
    },
    "358": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "359": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "360": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "361": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "363": {
      "error": "Property not listed",
      "op": "assert // Property not listed",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "364": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "365": {
      "error": "check self.listed_properties entry exists",
      "op": "assert // check self.listed_properties entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "366": {
      "retsub": true,
      "op": "retsub"
    }
  }
}